{"version":3,"sources":["components/DisplayText.jsx","components/DisplayGrade.js","components/TextExtract.jsx","components/DropArea.jsx","components/Footer.jsx","components/Nav.jsx","components/Form.jsx","components/UploadBox.jsx","components/ViewButton.jsx","components/LandingPage.jsx","components/TextView.jsx","App.js","index.js"],"names":["List","styled","div","P","p","DisplayText","useState","data","setData","undefined","loading","setLoading","useEffect","getTextData","a","axios","get","result","status","alert","map","arr","to","_id","page","fileName","autoplay","loop","mode","src","process","speed","style","width","GradeContainer","ListItem","li","DisplayGrade","grade","totalPoints","score","setScore","getGrade","console","log","id","pointsAwardable","Container","Instructions","Title","ul","Group","Item","TextExtract","section","ButtonContainer","children","path","DropArea","mark","year","Date","getFullYear","Foot","footer","Anchor","Footer","href","target","rel","NavBar","nav","BrandName","Nav","Form","action","method","htmlFor","type","name","className","value","Textarea","textarea","Input","input","attrs","props","UploadBox","files","setFiles","readOnly","cols","rows","placeholder","onChange","event","Array","from","multiple","Button","onClick","preventDefault","formData","FormData","forEach","fileItem","i","append","post","then","res","noFile","catch","error","UploadButton","button","ViewButton","Home","DetailsSection","LinkSection","LandingPage","TextContainer","Text","TextView","text","setText","setFileName","ref","useRef","useParams","rawText","handlePrint","useReactToPrint","onPrintError","content","current","removeAfterPrint","handleDownload","print","printIframe","document","contentDocument","html","getElementsByTagName","exporter","Html2Pdf","filename","getPdf","line","App","exact","element","padding","root","getElementById","ReactDOM","render"],"mappings":"mTAMMA,EAAOC,IAAOC,IAAV,+RAgBJC,EAAIF,IAAOG,EAAV,wHAOMC,EAAc,WACzB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,wBAASG,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAeA,OAbAC,qBAAU,WACR,IAAMC,EAAW,uCAAG,4BAAAC,EAAA,sEACCC,IAAMC,IAAN,cADD,OAEI,OADlBC,EADc,QAEPC,OACTC,MAAM,0CAENX,EAAQS,EAAOV,MACfI,GAAW,IANK,2CAAH,qDASjBE,MACC,IAGD,mCACIH,EAUA,qCACE,cAACP,EAAD,oEACCI,EAAKa,KAAI,SAACC,GAAD,OACR,eAACrB,EAAD,WACE,cAAC,IAAD,CAAMsB,GAAE,iBAAYD,EAAIE,KAAxB,SAAgCF,EAAIE,MACpC,cAAC,IAAD,CAAMD,GAAE,iBAAYD,EAAIE,KAAxB,SAAgCF,EAAIG,KAAKC,aAFhCJ,EAAIE,WAZnB,cAAC,IAAD,CACEG,UAAQ,EACRC,MAAI,EACJC,KAAK,SACLC,IAAKC,+FACLC,MAAM,IACNC,MAAO,CAAEC,MAAO,YClDpBC,EAAiBjC,IAAOC,IAAV,mXAgBdiC,EAAWlC,IAAOmC,GAAV,gDAIDC,EAAe,WAC1B,MAA0B/B,mBAAS,CAAEe,IAAK,GAAIiB,MAAO,EAAGC,YAAa,IAArE,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BnC,wBAASG,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAgBA,OAdAC,qBAAU,WACR,IAAM8B,EAAQ,uCAAG,4BAAA5B,EAAA,sEACIC,IAAMC,IAAN,kBADJ,OACXC,EADW,OAEf0B,QAAQC,IAAI,sBAAuB3B,EAAOV,MAC1CkC,EAAS,CACPpB,IAAKJ,EAAOV,KAAKc,IACjBiB,MAAOrB,EAAOV,KAAK+B,MACnBC,YAAatB,EAAOV,KAAKgC,cAE3B5B,GAAW,GARI,2CAAH,qDAUd+B,MACC,IAGD,mCACIhC,EAUA,eAACwB,EAAD,WACE,6BACGM,EAAMnB,IAAID,KAAI,SAACoB,GAAD,OACb,eAACL,EAAD,iCACsBK,EAAMK,GAAK,EADjC,KACsCL,EAAMA,MAD5C,IAEGA,EAAMM,kBAFMN,EAAMK,SAMzB,0EAA2CL,EAAMF,MAAjD,YAA0DE,EAAMD,kBAlBlE,cAAC,IAAD,CACEb,UAAQ,EACRC,MAAI,EACJC,KAAK,SACLC,IAAKC,+FACLC,MAAM,IACNC,MAAO,CAAEC,MAAO,YC/Cbc,EAAY9C,IAAOC,IAAV,oIAOT8C,EAAe/C,IAAOC,IAAV,qUAYZ+C,EAAQhD,IAAOG,EAAV,uHAOLJ,GAAOC,IAAOiD,GAAV,sHAKJC,GAAQlD,IAAOC,IAAV,sFAKLkD,GAAOnD,IAAOmC,GAAV,+IAQJiB,GAAc,WACzB,OACE,eAACN,EAAD,WACE,eAACC,EAAD,WACE,cAACC,EAAD,yBACA,eAAC,GAAD,WACE,eAACE,GAAD,WACE,cAACC,GAAD,+FAIA,cAACA,GAAD,sFAIA,cAACA,GAAD,wEAGA,cAACA,GAAD,yFAIA,cAACA,GAAD,oEACA,eAACA,GAAD,yBACa,2CADb,OAGA,cAACA,GAAD,0DAGF,eAACD,GAAD,WACE,cAACC,GAAD,qEACA,cAACA,GAAD,2FAIA,cAACA,GAAD,qIAON,cAAC,GAAD,CAAWE,QAAQ,SACnB,cAACC,GAAD,UACE,cAAC,GAAD,CAAYC,SAAS,YAAYC,KAAK,oBCpEjCF,GAAkBtD,IAAOC,IAAV,iGAUfwD,GAAW,SAACC,GACvB,OACE,eAACZ,EAAD,WACE,eAACC,EAAD,WACE,cAACC,EAAD,yBAEA,eAAC,GAAD,WACE,eAACE,GAAD,WACE,cAACC,GAAD,0EAGA,cAACA,GAAD,uEAGA,cAACA,GAAD,qDACA,cAACA,GAAD,uEAGA,cAACA,GAAD,4FAIA,cAACA,GAAD,yDAEF,eAACD,GAAD,WACE,cAACC,GAAD,oEACA,cAACA,GAAD,2FAIA,cAACA,GAAD,qIAQN,cAAC,GAAD,CAAWE,QAAQ,WACnB,cAAC,GAAD,CAAWA,QAAQ,SACnB,eAACC,GAAD,WAEE,cAAC,GAAD,CAAYC,SAAS,YAAYC,KAAK,WAGtC,cAAC,GAAD,CAAYD,SAAS,aAAaC,KAAK,sBC7EzCG,IAAO,IAAIC,MAAOC,cAElBC,GAAO9D,IAAO+D,OAAV,8HAQGC,GAAShE,IAAOa,EAAV,sDAINoD,GAAS,WACpB,OACE,cAACH,GAAD,UACE,8DAEE,eAACE,GAAD,CACEE,KAAK,4BACLC,OAAO,SACPC,IAAI,sBAHN,UAKG,IALH,cAMc,OARhB,QAUKT,SC1BLU,GAASrE,IAAOsE,IAAV,gUAYNC,GAAYvE,IAAOsE,IAAV,qOAiCFE,IArBIxE,IAAOiD,GAAV,oKASGjD,IAAOmC,GAAV,0NAYK,WACjB,OACE,cAACkC,GAAD,UACE,cAAC,IAAD,CAAMhD,GAAG,IAAT,SACE,cAACkD,GAAD,8BCnDKE,GAAO,WAClB,OACE,uBAAMC,OAAO,SAASC,OAAO,OAA7B,UACE,gCACE,uBAAOC,QAAQ,WAAf,sBACA,uBAAOC,KAAK,OAAOC,KAAK,WAAWC,UAAU,mBAE/C,gCACE,uBAAOH,QAAQ,WAAf,sBACA,uBAAOC,KAAK,WAAWC,KAAK,WAAWC,UAAU,mBAEnD,8BACE,uBAAOF,KAAK,SAASG,MAAM,SAASD,UAAU,uB,8BCRhDE,GAAWjF,IAAOkF,SAAV,8TAgBRT,GAAOzE,IAAOC,IAAV,sfA2BJkF,GAAQnF,IAAOoF,MAAMC,OAAM,SAACC,GAAD,MAAY,CAAET,KAAM,UAAvC7E,CAAH,6kBAyBEuF,GAAY,SAAC,GAAiB,IAAflC,EAAc,EAAdA,QAC1B,EAA0BhD,mBAAS,IAAnC,mBAAOmF,EAAP,KAAcC,EAAd,KAKA/C,QAAQC,IAAI6C,GA6BZ,OACE,eAAC,GAAD,WACE,cAACP,GAAD,CACES,SAAS,MACTZ,KAAK,UACLlC,GAAG,GACH+C,KAAK,KACLC,KAAK,IACLC,YAAW,iBAAYxC,EAAZ,kBAEb,cAAC8B,GAAD,CACEW,SA3Ca,SAACC,GAClBN,EAASO,MAAMC,KAAKF,EAAM5B,OAAOqB,SA4C7BV,KAAK,OACLoB,UAAQ,EACRnB,UAAU,eAEZ,cAACoB,GAAA,EAAD,CACEtB,KAAK,SACLuB,QA9CY,SAACL,GACjBA,EAAMM,iBAEN,IAAMC,EAAW,IAAIC,SACrBf,EAAMgB,SAAQ,SAACC,EAAUC,GACvBhE,QAAQC,IAAI8D,GACZH,EAASK,OAAOD,EAAGD,MAKrB3F,IACG8F,KADH,uBACwBvD,GAAWiD,GAChCO,MAAK,SAACC,GAEL,GADSA,EAAIxG,KAAKyG,OAIhB,OAFA7F,MAAM,kDACG,EAGI,MAAf4F,EAAI7F,OACAC,MAAM,0BACNA,MAAM,GAAD,OAAI4F,EAAIxG,UAElB0G,OAAM,SAACC,GAAD,OAAWvE,QAAQC,IAAIsE,OAuB5BlC,UAAU,wBAHZ,SAKE,cAAC,KAAD,CAAaA,UAAU,sBC/HzBmC,GAAelH,IAAOmH,OAAV,qeAyBLC,GAAa,SAAC,GAAwB,IAAtB7D,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KACrC,OACE,cAAC0D,GAAD,UACE,cAAC,IAAD,CAAM7F,GAAImC,EAAV,SAAiBD,OC5BjB8D,GAAOrH,IAAOC,IAAV,gtBAqCJqH,GAAiBtH,IAAOC,IAAV,imBA+BdsH,GAAcvH,IAAOC,IAAV,kjBA0BJuH,GAAc,WACzB,OACE,cAACH,GAAD,UACE,gCACE,uDACA,0GAEQ,IACN,+BACE,+CACM,IALV,oBAQA,eAACC,GAAD,WACE,gKAIA,mBAAGpD,KAAK,sCAAR,0CAKF,eAACqD,GAAD,WACE,cAAC,IAAD,CAAMlG,GAAG,QAAT,4BACA,cAAC,IAAD,CAAMA,GAAG,SAAT,6B,qCCnHJoG,GAAgBzH,IAAOC,IAAV,4QAUbyH,GAAO1H,IAAOG,EAAV,iPAYJmD,GAAkBtD,IAAOC,IAAV,gFAMfkG,GAASnG,IAAOmH,OAAV,wVAgBCQ,GAAW,WACtB,MAAwBtH,mBAAS,IAAjC,mBAAOuH,EAAP,KAAaC,EAAb,KACA,EAAgCxH,mBAAS,MAAzC,mBAAOmB,EAAP,KAAiBsG,EAAjB,KACA,EAA8BzH,wBAASG,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACMqH,EAAMC,mBACNpF,EAAOqF,eAAPrF,GAENjC,qBAAU,WACR,IAAMC,EAAW,uCAAG,WAAOgC,GAAP,eAAA/B,EAAA,sEACCC,IAAMC,IAAN,qBAAwB6B,IADzB,OACd5B,EADc,OAElB0B,QAAQC,IAAI,SAAU3B,GACA,MAAlBA,EAAOC,OACTC,MAAM,0CAMN2G,EAAQ7G,EAAOV,KAAK,GAAGiB,KAAK2G,SAC5BJ,EAAY9G,EAAOV,KAAK,GAAGiB,KAAKC,UAChCd,GAAW,IAZK,2CAAH,sDAejBE,EAAYgC,KACX,CAACA,IAEJ,IAAMuF,EAAcC,2BAAgB,CAClCC,aAAc,SAACpB,GAAD,OAAWvE,QAAQC,IAAIsE,IACrCqB,QAAS,kBAAMP,EAAIQ,SACnBC,kBAAkB,IAGdC,EAAiBL,2BAAgB,CACrCC,aAAc,SAACpB,GAAD,OAAWvE,QAAQC,IAAIsE,IACrCqB,QAAS,kBAAMP,EAAIQ,SACnBC,kBAAkB,EAClBE,MAAM,WAAD,4BAAE,WAAOC,GAAP,mBAAA9H,EAAA,2DACC+H,EAAWD,EAAYE,iBADxB,uBAGGC,EAAOF,EAASG,qBAAqB,QAAQ,GAC7CC,EAAW,IAAIC,KAASH,EAAM,CAClCI,SAAU1H,GAAsB,SAL/B,SAOIwH,EAASG,QAAO,GAPpB,4CAO8BjI,MAAM,2BAPpC,2CAAF,mDAAC,KAYR,OACE,mCACIT,EAUA,qCACE,cAACgH,GAAD,CAAeM,IAAKA,EAApB,SACGH,EAAKzG,KAAI,SAACiI,EAAMxG,GAAP,OACR,cAAC8E,GAAD,UAAgB0B,GAALxG,QAGf,eAAC,GAAD,WACE,cAAC,GAAD,CAAQwD,QAAS+B,EAAjB,mBACA,cAAC,GAAD,CAAQ/B,QAASqC,EAAjB,4BAjBJ,cAAC,IAAD,CACEhH,UAAQ,EACRC,MAAI,EACJC,KAAK,SACLC,IAAKC,+FACLC,MAAM,IACNC,MAAO,CAAEC,MAAO,Y,MClEXqH,OA5Bf,WACE,OACE,cAAC,IAAD,UACE,sBAAKtE,UAAU,MAAf,UACE,cAAC,GAAD,IACA,eAAC,KAAD,WACE,cAAC,KAAD,CAAOvB,KAAK,IAAI8F,OAAK,EAACC,QAAS,cAAC,GAAD,MAC/B,cAAC,KAAD,CAAO/F,KAAK,QAAQ+F,QAAS,cAAC,GAAD,MAC7B,cAAC,KAAD,CAAO/F,KAAK,OAAO+F,QAAS,cAAC,GAAD,MAC5B,cAAC,KAAD,CAAO/F,KAAK,QAAQ+F,QAAS,cAAC,GAAD,MAC7B,cAAC,KAAD,CAAO/F,KAAK,QAAQ+F,QAAS,cAAC,EAAD,MAC7B,cAAC,KAAD,CAAO/F,KAAK,YAAY+F,QAAS,cAAC,EAAD,MACjC,cAAC,KAAD,CAAO/F,KAAK,YAAY+F,QAAS,cAAC,GAAD,MACjC,cAAC,KAAD,CACE/F,KAAK,IACL+F,QACE,sBAAMxH,MAAO,CAAEyH,QAAS,QAAxB,SACE,oEAKR,cAAC,GAAD,UCjCFC,GAAOb,SAASc,eAAe,QAErCC,IAASC,OACP,cAAC,GAAD,IAASH,M","file":"static/js/main.11d2fb2b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport styled from \"styled-components\";\r\nimport { Player } from \"@lottiefiles/react-lottie-player\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst List = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-evenly;\r\n  gap: 1rem;\r\n  padding: 0.3rem;\r\n  width: 100%;\r\n  @media screen and (min-width: 768px) {\r\n    font-size: 1.5rem;\r\n  }\r\n  height: 100%;\r\n  &:first-of-type {\r\n    margin-top: 3rem;\r\n  }\r\n`;\r\n\r\nconst P = styled.p`\r\n  margin-top: 2rem;\r\n  @media screen and (min-width: 768px) {\r\n    font-size: 1.5rem;\r\n  }\r\n`;\r\n\r\nexport const DisplayText = () => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    const getTextData = async () => {\r\n      let result = await axios.get(`/api/texts`);\r\n      if (result.status !== 200) {\r\n        alert(`Unable to retrieve text from database`);\r\n      } else {\r\n        setData(result.data);\r\n        setLoading(true);\r\n      }\r\n    };\r\n    getTextData();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {!loading ? (\r\n        <Player\r\n          autoplay\r\n          loop\r\n          mode=\"normal\"\r\n          src={process.env.REACT_APP_LOAD_SCREEN_ANIMATION}\r\n          speed=\"1\"\r\n          style={{ width: \"70%\" }}\r\n        ></Player>\r\n      ) : (\r\n        <>\r\n          <P>Click on a document's id or filename to view its text</P>\r\n          {data.map((arr) => (\r\n            <List key={arr._id}>\r\n              <Link to={`/texts/${arr._id}`}>{arr._id}</Link>\r\n              <Link to={`/texts/${arr._id}`}>{arr.page.fileName}</Link>\r\n            </List>\r\n          ))}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n// export { DisplayText, handlePrint, handleDownload };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport styled from \"styled-components\";\r\nimport { Player } from \"@lottiefiles/react-lottie-player\";\r\n\r\nconst GradeContainer = styled.div`\r\n  @import url(\"https://fonts.googleapis.com/css2?family=Roboto:wght@300&display=swap\");\r\n  font-family: \"Roboto\", sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 1rem;\r\n  width: 100vw;\r\n  height: 70vh;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    font-size: 2rem;\r\n  }\r\n`;\r\n\r\nconst ListItem = styled.li`\r\n  padding: 0.4rem;\r\n`;\r\n\r\nexport const DisplayGrade = () => {\r\n  const [score, setScore] = useState({ arr: [], grade: 0, totalPoints: 0 });\r\n  const [loading, setLoading] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    const getGrade = async () => {\r\n      let result = await axios.get(`/api/viewGrade`);\r\n      console.log(\"received grade data\", result.data);\r\n      setScore({\r\n        arr: result.data.arr,\r\n        grade: result.data.grade,\r\n        totalPoints: result.data.totalPoints,\r\n      });\r\n      setLoading(true);\r\n    };\r\n    getGrade();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {!loading ? (\r\n        <Player\r\n          autoplay\r\n          loop\r\n          mode=\"normal\"\r\n          src={process.env.REACT_APP_LOAD_SCREEN_ANIMATION}\r\n          speed=\"1\"\r\n          style={{ width: \"70%\" }}\r\n        ></Player>\r\n      ) : (\r\n        <GradeContainer>\r\n          <ul>\r\n            {score.arr.map((score) => (\r\n              <ListItem key={score.id}>\r\n                Score for question {score.id + 1}: {score.score}/\r\n                {score.pointsAwardable}\r\n              </ListItem>\r\n            ))}\r\n          </ul>\r\n          <p>{`Total score for this answer page is ${score.grade}/${score.totalPoints}`}</p>\r\n        </GradeContainer>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { UploadBox, ViewButton } from \"./index\";\r\nimport { ButtonContainer } from \"./DropArea\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Instructions = styled.div`\r\n  @import url(\"https://fonts.googleapis.com/css2?family=Raleway:wght@300&family=Roboto:wght@300&display=swap\");\r\n  font-family: \"Raleway\", sans-serif;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0.5rem;\r\n  margin: 2rem 0;\r\n`;\r\n\r\nexport const Title = styled.p`\r\n  font-size: 1.5rem;\r\n  @media screen and (min-width: 768px) {\r\n    font-size: 2rem;\r\n  }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n  list-style: disc url(\"../icons/check_box_FILL0_wght400_GRAD0_opsz48.png\")\r\n    inside;\r\n`;\r\n\r\nexport const Group = styled.div`\r\n  padding: 1rem 0;\r\n  font-family: \"Roboto\", sans-serif;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  font-size: 0.8rem;\r\n  padding: 0.2rem 0;\r\n  @media screen and (min-width: 768px) {\r\n    font-size: 1.2rem;\r\n  }\r\n`;\r\n\r\nexport const TextExtract = () => {\r\n  return (\r\n    <Container>\r\n      <Instructions>\r\n        <Title>How to use</Title>\r\n        <List>\r\n          <Group>\r\n            <Item>\r\n              Upload image/pdf containing handwritten text using the provided\r\n              interface below.\r\n            </Item>\r\n            <Item>\r\n              This could be a picture or scanned copy of handwritten or printed\r\n              text.\r\n            </Item>\r\n            <Item>\r\n              Wait for alert notification confirming successful upload.\r\n            </Item>\r\n            <Item>\r\n              Wait for another alert notification confirming document saved in\r\n              database.\r\n            </Item>\r\n            <Item>If no, second notification, wait for about 5 minutes.</Item>\r\n            <Item>\r\n              Proceed to <em>View Text</em>.\r\n            </Item>\r\n            <Item>Proceed to view extracted text or grade.</Item>\r\n          </Group>\r\n\r\n          <Group>\r\n            <Item>Supported file formats: JPEG, PNG, BMP, PDF, and TIFF.</Item>\r\n            <Item>\r\n              For PDF and TIFF files, the system currently processes only first\r\n              two pages.\r\n            </Item>\r\n            <Item>\r\n              The file size must be less than 4 MB and dimensions at least 50 x\r\n              50 pixels and at most 10000 x 10000 pixels.\r\n            </Item>\r\n          </Group>\r\n        </List>\r\n      </Instructions>\r\n      <UploadBox section=\"text\" />\r\n      <ButtonContainer>\r\n        <ViewButton children=\"View text\" path=\"/viewText\" />\r\n      </ButtonContainer>\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { UploadBox, ViewButton } from \"./index\";\r\nimport {\r\n  Container,\r\n  Instructions,\r\n  Title,\r\n  List,\r\n  Group,\r\n  Item,\r\n} from \"./TextExtract\";\r\n\r\n// const UploadArea = styled.div`\r\n//   width: 70vw;\r\n//   display: flex;\r\n//   flex-direction: column;\r\n//   align-items: center;\r\n//   gap: 0.5rem;\r\n//   padding: 0.5em;\r\n//   @media screen and (min-width: 768px) {\r\n//     font-size: 1.1rem;\r\n//     width: 100vw;\r\n//   }\r\n// `;\r\n\r\nexport const ButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  height: 9vh;\r\n`;\r\n\r\n// const ButtonDiv = styled.div`\r\n//   &: hover;\r\n// `;\r\n\r\nexport const DropArea = (mark) => {\r\n  return (\r\n    <Container>\r\n      <Instructions>\r\n        <Title>How to use</Title>\r\n\r\n        <List>\r\n          <Group>\r\n            <Item>\r\n              Upload a page of student answer sheet in the specified area\r\n            </Item>\r\n            <Item>\r\n              Wait for alert notification confirming successful upload\r\n            </Item>\r\n            <Item>Upload marking guide in specified area</Item>\r\n            <Item>\r\n              Wait for alert notification confirming successful upload\r\n            </Item>\r\n            <Item>\r\n              Wait for about 5 minutes for reading and keyword extraction to be\r\n              carried out\r\n            </Item>\r\n            <Item>Proceed to view extracted text or grade</Item>\r\n          </Group>\r\n          <Group>\r\n            <Item>Supported file formats: JPEG, PNG, BMP, PDF, and TIFF</Item>\r\n            <Item>\r\n              For PDF and TIFF files, the system currently processes only first\r\n              two pages.\r\n            </Item>\r\n            <Item>\r\n              The file size must be less than 4 MB and dimensions at least 50 x\r\n              50 pixels and at most 10000 x 10000 pixels.\r\n            </Item>\r\n          </Group>\r\n        </List>\r\n      </Instructions>\r\n\r\n      <UploadBox section=\"answer\" />\r\n      <UploadBox section=\"mark\" />\r\n      <ButtonContainer>\r\n        {/* <ButtonDiv> */}\r\n        <ViewButton children=\"View text\" path=\"/texts\" />\r\n        {/* <ViewButton children=\"View text\" path=\"/viewText\" /> */}\r\n        {/* </ButtonDiv> */}\r\n        <ViewButton children=\"View grade\" path=\"/viewGrade\" />\r\n      </ButtonContainer>\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst year = new Date().getFullYear();\r\n\r\nconst Foot = styled.footer`\r\n  font-size: 0.8rem;\r\n  position: absolute;\r\n  width: 100%;\r\n  text-align: center;\r\n  bottom: 0;\r\n`;\r\n\r\nexport const Anchor = styled.a`\r\n  text-decoration: none;\r\n`;\r\n\r\nexport const Footer = () => {\r\n  return (\r\n    <Foot>\r\n      <p>\r\n        Made with ❤ and React by\r\n        <Anchor\r\n          href=\"https://github.com/Fiewor\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer noopener\"\r\n        >\r\n          {\" \"}\r\n          John Fiewor{\" \"}\r\n        </Anchor>\r\n        © {year}\r\n      </p>\r\n    </Foot>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NavBar = styled.nav`\r\n  @import url(\"https://fonts.googleapis.com/css2?family=Roboto:wght@300&display=swap\");\r\n  font-family: \"Roboto\", sans-serif;\r\n  background: #000;\r\n  color: rgb(255, 255, 255);\r\n  min-height: 8vh;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width: 100vw;\r\n`;\r\n\r\nconst BrandName = styled.nav`\r\n  font-size: 1.5rem;\r\n  padding-left: 3vw;\r\n  color: rgb(255, 255, 255);\r\n  &:hover {\r\n    color: rgba(255, 255, 255, 0.9);\r\n  }\r\n  @media screen and (min-width: 768px) {\r\n    font-size: 2.5rem;\r\n  }\r\n`;\r\n\r\nconst NavLinks = styled.ul`\r\n  width: 30%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  list-style: none;\r\n`;\r\n\r\nconst LinkItem = styled.li`\r\n  color: white;\r\n  font-size: 1rem;\r\n  text-decoration: none;\r\n  &:hover {\r\n    color: rgba(255, 255, 255, 0.9);\r\n  }\r\n  @media screen and (min-width: 768px) {\r\n    font-size: 1.6rem;\r\n  }\r\n`;\r\n\r\nexport const Nav = () => {\r\n  return (\r\n    <NavBar>\r\n      <Link to=\"/\">\r\n        <BrandName>AI-Grader</BrandName>\r\n      </Link>\r\n      {/* <NavLinks>\r\n        <Link to=\"/\">\r\n          <LinkItem>Home</LinkItem>\r\n        </Link>\r\n        <Link to=\"/login\">\r\n          <LinkItem>Login</LinkItem>\r\n        </Link>\r\n      </NavLinks> */}\r\n    </NavBar>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Form = () => {\r\n  return (\r\n    <form action=\"/login\" method=\"post\">\r\n      <div>\r\n        <label htmlFor=\"username\">Username</label>\r\n        <input type=\"text\" name=\"username\" className=\"login-input\" />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"password\">Password</label>\r\n        <input type=\"password\" name=\"password\" className=\"login-input\" />\r\n      </div>\r\n      <div>\r\n        <input type=\"submit\" value=\"Log In\" className=\"login-button\" />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PublishIcon from \"@material-ui/icons/Publish\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport axios from \"axios\";\r\n\r\nconst Textarea = styled.textarea`\r\n  width: 100%;\r\n  height: 90%;\r\n  padding: 10px;\r\n  margin: 0.1rem;\r\n  border-radius: 20px;\r\n  box-shadow: 0 0 5px 4px rgb(161, 161, 161);\r\n  background-color: #fff;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  resize: none;\r\n  position: relative;\r\n  text-align: center;\r\n  display: relative;\r\n`;\r\n\r\nconst Form = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: space-between;\r\n  min-width: 40vw;\r\n  min-height: max-content;\r\n  overflow: hidden;\r\n  padding: 0.5rem 5rem;\r\n\r\n  .upload-icon-container {\r\n    cursor: pointer;\r\n    position: absolute;\r\n    align-self: flex-end;\r\n    transform: translateY(2em);\r\n  }\r\n\r\n  .upload-icon {\r\n    color: rgb(23, 74, 167);\r\n    &:hover {\r\n      color: rgb(4, 26, 66);\r\n    }\r\n    &:active {\r\n      color: rgb(172, 40, 40);\r\n    }\r\n  }\r\n`;\r\n\r\nconst Input = styled.input.attrs((props) => ({ type: \"file\" }))`\r\n  position: absolute;\r\n  padding: 2em 0 0 1em;\r\n  &::file-selector-button {\r\n    display: inline-block;\r\n    background: linear-gradient(top, #f9f9f9, #e3e3e3);\r\n    border: 1px solid #999;\r\n    border-radius: 3px;\r\n    padding: 5px 8px;\r\n    outline: none;\r\n    white-space: nowrap;\r\n    -webkit-user-select: none;\r\n    cursor: pointer;\r\n    text-shadow: 1px 1px #fff;\r\n    font-weight: 700;\r\n    font-size: 10pt;\r\n    &:hover {\r\n      border-color: black;\r\n    }\r\n    &:active {\r\n      background: -webkit-linear-gradient(top, #e3e3e3, #f9f9f9);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const UploadBox = ({ section }) => {\r\n  const [files, setFiles] = useState([]);\r\n\r\n  const fileUpload = (event) => {\r\n    setFiles(Array.from(event.target.files));\r\n  };\r\n  console.log(files);\r\n\r\n  const sendFiles = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = new FormData();\r\n    files.forEach((fileItem, i) => {\r\n      console.log(fileItem);\r\n      formData.append(i, fileItem);\r\n    });\r\n\r\n    let noFile = false;\r\n\r\n    axios\r\n      .post(`/api/uploads/${section}`, formData)\r\n      .then((res) => {\r\n        noFile = res.data.noFile;\r\n        if (noFile) {\r\n          alert(`Choose at least one file before uploading`);\r\n          noFile = false;\r\n          return;\r\n        }\r\n        res.status !== 200\r\n          ? alert(`Unable to upload files`)\r\n          : alert(`${res.data}`);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  return (\r\n    <Form>\r\n      <Textarea\r\n        readOnly=\"yes\"\r\n        name=\"content\"\r\n        id=\"\"\r\n        cols=\"20\"\r\n        rows=\"3\"\r\n        placeholder={`Upload ${section} sheets here`}\r\n      />\r\n      <Input\r\n        onChange={fileUpload}\r\n        // type=\"file\"\r\n        name=\"file\"\r\n        multiple\r\n        className=\"file-input\"\r\n      />\r\n      <Button\r\n        type=\"submit\"\r\n        onClick={sendFiles}\r\n        className=\"upload-icon-container\"\r\n      >\r\n        <PublishIcon className=\"upload-icon\" />\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst UploadButton = styled.button`\r\n  background: #959595;\r\n  padding: 0.01rem 1.5rem;\r\n  border: none;\r\n  margin: 0.2rem 0.5rem;\r\n  border-radius: 20px;\r\n  box-shadow: 1px 1px 1px 1px rgb(0, 0, 0);\r\n  @media screen and (min-width: 768px) {\r\n    font-size: 1rem;\r\n  }\r\n  &:hover {\r\n    cursor: pointer;\r\n    background: #5e5e5e;\r\n  }\r\n  &:active {\r\n    box-shadow: 0px 0px 1px 0px rgb(0, 0, 0);\r\n  }\r\n  a {\r\n    text-decoration: none;\r\n    color: white;\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nexport const ViewButton = ({ children, path }) => {\r\n  return (\r\n    <UploadButton>\r\n      <Link to={path}>{children}</Link>\r\n    </UploadButton>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Home = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: center;\r\n  justify-content: center;\r\n  gap: 1rem;\r\n  h1 {\r\n    text-align: center;\r\n    padding: 1rem 0;\r\n    margin-top: 1rem;\r\n    font-size: 1.7rem;\r\n    @media screen and (min-width: 768px) {\r\n      padding: 2rem 0;\r\n      font-size: 2.5rem;\r\n    }\r\n  }\r\n  p {\r\n    font-family: \"Roboto Mono\", monospace;\r\n    padding: 1rem 0;\r\n    text-align: center;\r\n    @media screen and (min-width: 768px) {\r\n      font-size: 1.5rem;\r\n      padding: 1rem;\r\n    }\r\n    span {\r\n      font-family: \"Indie Flower\", cursive;\r\n    }\r\n  }\r\n  a {\r\n    text-decoration: none;\r\n    color: white;\r\n    &:hover {\r\n      cursor: pointer;\r\n    }\r\n  }\r\n`;\r\n\r\nconst DetailsSection = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background: #959595;\r\n  color: white;\r\n  width: 100vw;\r\n  padding: 2rem 1rem;\r\n  margin: 1rem 0;\r\n  font-family: \"Raleway\", sans-serif;\r\n  @media screen and (min-width: 768px) {\r\n    padding: 5rem 2rem;\r\n  }\r\n  p {\r\n    @media screen and (min-width: 768px) {\r\n      font-size: 1.2rem;\r\n    }\r\n  }\r\n  a {\r\n    text-align: center;\r\n    color: black;\r\n    font-size: 0.75rem;\r\n    &:hover {\r\n      color: rgba(0, 0, 0, 0.6);\r\n    }\r\n    @media screen and (min-width: 768px) {\r\n      font-size: 1rem;\r\n    }\r\n  }\r\n`;\r\n\r\nconst LinkSection = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  text-align: left;\r\n  justify-content: center;\r\n  gap: 2rem;\r\n  padding: 1rem 0;\r\n  a {\r\n    background: rgb(94, 94, 94);\r\n    padding: 0.5rem 0.8rem;\r\n    margin-bottom: 1rem;\r\n    border-radius: 20px;\r\n    box-shadow: 1px 1px 1px 1px rgb(0, 0, 0);\r\n    &:hover {\r\n      background: rgb(94, 94, 94, 0.8);\r\n    }\r\n    &:active {\r\n      box-shadow: 0px 0px 1px 0px rgb(0, 0, 0);\r\n    }\r\n    @media screen and (min-width: 768px) {\r\n      padding: 0.8rem 1rem;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LandingPage = () => {\r\n  return (\r\n    <Home>\r\n      <div>\r\n        <h1>Welcome to AI-Grader!</h1>\r\n        <p>\r\n          AI-Grader is a web application that uses artificial intelligence to\r\n          grade{\" \"}\r\n          <span>\r\n            <em>handwritten</em>\r\n          </span>{\" \"}\r\n          answer sheets.\r\n        </p>\r\n        <DetailsSection>\r\n          <p>\r\n            AI-Grader uses Microsoft Azure Cognitive Services - Computer Vision,\r\n            Optical Character Recognition and Key Phrase Extraction...\r\n          </p>\r\n          <a href=\"https://github.com/Fiewor/ai-grader\">\r\n            Read more on how it works\r\n          </a>\r\n        </DetailsSection>\r\n\r\n        <LinkSection>\r\n          <Link to=\"/text\">Text-Extractor</Link>\r\n          <Link to=\"/grade\">Grader</Link>\r\n        </LinkSection>\r\n      </div>\r\n    </Home>\r\n  );\r\n};\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport styled from \"styled-components\";\r\nimport { Player } from \"@lottiefiles/react-lottie-player\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport Html2Pdf from \"js-html2pdf\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst TextContainer = styled.div`\r\n  @import url(\"https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400&display=swap\");\r\n  font-family: \"Roboto Mono\", monospace;\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-wrap: wrap;\r\n  text-align: left;\r\n  padding: 2rem;\r\n`;\r\n\r\nconst Text = styled.p`\r\n  font-size: 0.8rem;\r\n  padding: 0.2rem 2rem;\r\n  border-bottom: 0.1px solid black;\r\n  &:first-child {\r\n    border-top: 0.1px solid black;\r\n  }\r\n  @media screen and (min-width: 768px) {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  gap: 1rem;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 0.5rem 1rem;\r\n  margin-bottom: 1rem;\r\n  color: white;\r\n  background: rgba(28, 140, 214, 1);\r\n  border: none;\r\n  border-radius: 20px;\r\n  box-shadow: 1px 1px 1px 1px rgb(0, 0, 0);\r\n  &:hover {\r\n    background: rgba(28, 140, 214, 0.8);\r\n  }\r\n  &:active {\r\n    box-shadow: 0px 0px 1px 0px rgb(0, 0, 0);\r\n  }\r\n`;\r\n\r\nexport const TextView = () => {\r\n  const [text, setText] = useState([]);\r\n  const [fileName, setFileName] = useState(null);\r\n  const [loading, setLoading] = useState(undefined);\r\n  const ref = useRef();\r\n  let { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    const getTextData = async (id) => {\r\n      let result = await axios.get(`/api/texts/${id}`);\r\n      console.log(\"result\", result);\r\n      if (result.status !== 200) {\r\n        alert(`Unable to retrieve text from database`);\r\n      } else {\r\n        // using data[0] to get the first element in the data array\r\n        // because the backend uses find() which returns an array of elements\r\n        // ? might switch from find() to findOne() after figuring out...\r\n        // ? ...how to check availability of document using findOne()\r\n        setText(result.data[0].page.rawText);\r\n        setFileName(result.data[0].page.fileName);\r\n        setLoading(true);\r\n      }\r\n    };\r\n    getTextData(id);\r\n  }, [id]);\r\n\r\n  const handlePrint = useReactToPrint({\r\n    onPrintError: (error) => console.log(error),\r\n    content: () => ref.current,\r\n    removeAfterPrint: true,\r\n  });\r\n\r\n  const handleDownload = useReactToPrint({\r\n    onPrintError: (error) => console.log(error),\r\n    content: () => ref.current,\r\n    removeAfterPrint: true,\r\n    print: async (printIframe) => {\r\n      const document = printIframe.contentDocument;\r\n      if (document) {\r\n        const html = document.getElementsByTagName(\"html\")[0];\r\n        const exporter = new Html2Pdf(html, {\r\n          filename: fileName ? fileName : \"file\",\r\n        });\r\n        (await exporter.getPdf(true)) && alert(\"downloading pdf file...\");\r\n      }\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {!loading ? (\r\n        <Player\r\n          autoplay\r\n          loop\r\n          mode=\"normal\"\r\n          src={process.env.REACT_APP_LOAD_SCREEN_ANIMATION}\r\n          speed=\"1\"\r\n          style={{ width: \"70%\" }}\r\n        ></Player>\r\n      ) : (\r\n        <>\r\n          <TextContainer ref={ref}>\r\n            {text.map((line, id) => (\r\n              <Text key={id}>{line}</Text>\r\n            ))}\r\n          </TextContainer>\r\n          <ButtonContainer>\r\n            <Button onClick={handlePrint}>Print</Button>\r\n            <Button onClick={handleDownload}>Download</Button>\r\n          </ButtonContainer>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  DropArea,\r\n  DisplayText,\r\n  DisplayGrade,\r\n  Nav,\r\n  Form,\r\n  Footer,\r\n  LandingPage,\r\n  TextView,\r\n  TextExtract,\r\n} from \"./components\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Nav />\r\n        <Routes>\r\n          <Route path=\"/\" exact element={<LandingPage />} />\r\n          <Route path=\"grade\" element={<DropArea />} />\r\n          <Route path=\"text\" element={<TextExtract />} />\r\n          <Route path=\"login\" element={<Form />} />\r\n          <Route path=\"texts\" element={<DisplayText />} />\r\n          <Route path=\"viewGrade\" element={<DisplayGrade />} />\r\n          <Route path=\"texts/:id\" element={<TextView />} />\r\n          <Route\r\n            path=\"*\"\r\n            element={\r\n              <main style={{ padding: \"1rem\" }}>\r\n                <p>Ooops. There's nothing here!</p>\r\n              </main>\r\n            }\r\n          />\r\n        </Routes>\r\n        <Footer />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconst root = document.getElementById('root')\n\nReactDOM.render(\n  <App />, root\n);\n\nif(module.hot){\n  module.hot.accept();\n}"],"sourceRoot":""}